import io
import argparse
import os
import sys
import itertools
import string
import pyfiglet  # Import pyfiglet for ASCII art generation
from doc97 import Doc97File  # Gi·∫£ s·ª≠ l·ªõp c·ªßa b·∫°n n·∫±m trong doc97file.py
import exceptions
import colorama
from functools import partial
from colorama import Fore, Back, Style
from xor_obfuscation import DocumentXOR  
from tqdm import tqdm  # Th√™m tqdm cho thanh ti·∫øn tr√¨nh

# Kh·ªüi t·∫°o colorama ƒë·ªÉ h·ªó tr·ª£ m√†u s·∫Øc tr√™n t·∫•t c·∫£ c√°c n·ªÅn t·∫£ng
colorama.init(autoreset=True)

# ƒê·ªãnh nghƒ©a m√†u s·∫Øc s·ª≠ d·ª•ng m√£ ANSI cho m·ªôt phong c√°ch "hacker"
RED = Fore.RED
GREEN = Fore.GREEN
YELLOW = Fore.YELLOW
BLUE = Fore.BLUE
MAGENTA = Fore.MAGENTA
CYAN = Fore.CYAN
WHITE = Fore.WHITE
RESET = Style.RESET_ALL  # ƒê·∫∑t l·∫°i m√†u s·∫Øc v·ªÅ m·∫∑c ƒë·ªãnh

def display_logo():
    """Hi·ªÉn th·ªã logo v·ªõi t√™n 'THANH TAM' v√† m·∫∑t c∆∞·ªùi."""
    logo = pyfiglet.figlet_format("THANH TAM")  # T·∫°o ASCII art cho t√™n
    print(f"{MAGENTA}{logo}{RESET}")
    print(f"{YELLOW}üòä{RESET}")  # Th√™m m·∫∑t c∆∞·ªùi v√†o cu·ªëi logo

def display_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng CLI v·ªõi m√†u s·∫Øc."""
    help_text = f"""
    {CYAN}H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√¥ng c·ª• gi·∫£i m√£ MS DOC 97:{RESET}

    =========================================================
    1. Ki·ªÉm tra m√£ h√≥a c·ªßa file
    ---------------------------------------------------------
    S·ª≠ d·ª•ng `--check` ƒë·ªÉ ki·ªÉm tra m√£ h√≥a c·ªßa file.
    V√≠ d·ª•: 
    ```bash
    python cli.py /path/to/file.doc --check
    ```

    =========================================================
    2. Gi·∫£i m√£ file b·∫±ng m·∫≠t kh·∫©u
    ---------------------------------------------------------
    Cung c·∫•p m·∫≠t kh·∫©u v√† ƒë∆∞·ªùng d·∫´n ƒë·∫ßu ra.
    V√≠ d·ª•: 
    ```bash
    python cli.py /path/to/file.doc --password "your_password" --output /path/to/decrypted_file.doc
    ```
    Tham s·ªë: `--password`, `--output`

    =========================================================
    3. Gi·∫£i m√£ v·ªõi wordlist (danh s√°ch m·∫≠t kh·∫©u)
    ---------------------------------------------------------
    Cung c·∫•p ƒë∆∞·ªùng d·∫´n t·ªõi file wordlist.
    V√≠ d·ª•: 
    ```bash
    python cli.py /path/to/file.doc --wordlist /path/to/wordlist.txt --output /path/to/decrypted_file.doc
    ```

    =========================================================
    4. Gi·∫£i m√£ v·ªõi XOR
    ---------------------------------------------------------
    Gi·∫£i m√£ b·∫±ng ph∆∞∆°ng ph√°p XOR.
    V√≠ d·ª•: 
    ```bash
    python cli.py /path/to/file.doc --xor --password "your_password" --output /path/to/decrypted_file.doc
    ```

    =========================================================
    5. Sinh m·∫≠t kh·∫©u ph·ª©c t·∫°p ƒë·ªÉ gi·∫£i m√£
    ---------------------------------------------------------
    T·∫°o v√† th·ª≠ m·∫≠t kh·∫©u ph·ª©c t·∫°p.
    V√≠ d·ª•: 
    ```bash
    python cli.py /path/to/file.doc --generate-passwords --output /path/to/decrypted_file.doc
    ```

    =========================================================
    C√°c tham s·ªë:
    ---------------------------------------------------------
    - `file`: ƒê∆∞·ªùng d·∫´n t·ªõi file DOC 97 c·∫ßn gi·∫£i m√£.
    - `--password`: M·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ file.
    - `--check`: Ki·ªÉm tra m√£ h√≥a c·ªßa file.
    - `--output`: ƒê∆∞·ªùng d·∫´n l∆∞u file gi·∫£i m√£.
    - `--wordlist`: ƒê∆∞·ªùng d·∫´n t·ªõi file ch·ª©a danh s√°ch m·∫≠t kh·∫©u.
    - `--xor`: D√πng ph∆∞∆°ng ph√°p XOR ƒë·ªÉ gi·∫£i m√£.
    - `--generate-passwords`: Sinh v√† th·ª≠ m·∫≠t kh·∫©u ph·ª©c t·∫°p.
    """
    print(help_text)


def check_encryption(file_path):
    """Ki·ªÉm tra xem file c√≥ ƒë∆∞·ª£c m√£ h√≥a kh√¥ng v√† ch·ªâ hi·ªÉn th·ªã tr·∫°ng th√°i m√£ h√≥a v·ªõi m√†u s·∫Øc."""
    try:
        with open(file_path, "rb") as f:
            doc = Doc97File(f)
            is_encrypted = doc.is_encrypted()
            print(f"{GREEN}File c√≥ m√£ h√≥a: {is_encrypted}{RESET}")

    except Exception as e:
        print(f"{RED}L·ªói khi ki·ªÉm tra m√£ h√≥a: {e}{RESET}")

def decrypt_with_xor(file_path, password, output_path=None):
    """Gi·∫£i m√£ file s·ª≠ d·ª•ng XOR v·ªõi m·∫≠t kh·∫©u v√† ch·ªâ in m·∫≠t kh·∫©u n·∫øu ƒë√∫ng."""
    try:
        # M·ªü file g·ªëc ƒë·ªÉ ƒë·ªçc
        with open(file_path, "rb") as f:
            doc = Doc97File(f)
            doc.load_key(password=password)  # Gi·∫£i m√£ v·ªõi m·∫≠t kh·∫©u

            # T·∫°o m·∫£ng XOR t·ª´ m·∫≠t kh·∫©u
            xor_array = DocumentXOR.create_xor_array_method1(password)

            # ƒê·ªçc to√†n b·ªô n·ªôi dung file v√†o b·ªô nh·ªõ
            ibuf = io.BytesIO(f.read())  # ƒê·∫£m b·∫£o r·∫±ng m√¥-ƒëun io ƒë∆∞·ª£c s·ª≠ d·ª•ng
            
            # Gi·∫£i m√£ n·ªôi dung c·ªßa file
            obuf = DocumentXOR.decrypt(password, ibuf, ibuf.read(), None, None)

            # N·∫øu gi·∫£i m√£ th√†nh c√¥ng, in m·∫≠t kh·∫©u ra CLI
            print(f"{GREEN}M·∫≠t kh·∫©u ƒë√∫ng l√†: {password}{RESET}")
            return True

    except exceptions.InvalidKeyError:
        # Kh√¥ng c·∫ßn l√†m g√¨ n·∫øu m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
        pass
    except exceptions.DecryptionError as e:
        print(f"{RED}L·ªói khi gi·∫£i m√£: {e}{RESET}")
    except Exception as e:
        print(f"{RED}L·ªói khi gi·∫£i m√£ file: {e}{RESET}")

    return False

def decrypt_file(file_path, password, output_path):
    """Gi·∫£i m√£ file b·∫±ng m·∫≠t kh·∫©u v·ªõi th√¥ng b√°o m√†u s·∫Øc."""
    try:
        with open(file_path, "rb") as f:
            doc = Doc97File(f)
            doc.load_key(password=password)
            with open(output_path, "wb") as outfile:
                doc.decrypt(outfile)
            print(f"{GREEN}File ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£ v√† l∆∞u t·∫°i {output_path}{RESET}")
    except exceptions.InvalidKeyError:
        print(f"{RED}M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.{RESET}")
    except exceptions.DecryptionError as e:
        print(f"{RED}L·ªói khi gi·∫£i m√£: {e}{RESET}")
    except Exception as e:
        print(f"{RED}L·ªói khi gi·∫£i m√£ file: {e}{RESET}")

def decrypt_using_wordlist(file_path, wordlist_path, output_path):
    """Gi·∫£i m√£ file s·ª≠ d·ª•ng danh s√°ch m·∫≠t kh·∫©u t·ª´ wordlist m√† kh√¥ng c√≥ XOR."""
    try:
        # ƒê·ªçc m·∫≠t kh·∫©u t·ª´ wordlist
        with open(wordlist_path, "r") as wordlist_file:
            passwords = wordlist_file.readlines()

        # S·ª≠ d·ª•ng tqdm ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh khi l·∫∑p qua t·ª´ng m·∫≠t kh·∫©u
        with tqdm(total=len(passwords), desc="ƒêang th·ª≠ m·∫≠t kh·∫©u", unit=" m·∫≠t kh·∫©u") as pbar:
            # L·∫∑p qua t·ª´ng m·∫≠t kh·∫©u trong wordlist
            for password in passwords:
                password = password.strip()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† k√Ω t·ª± xu·ªëng d√≤ng
                try:
                    # M·ªü file v√† gi·∫£i m√£ b·∫±ng m·∫≠t kh·∫©u
                    with open(file_path, "rb") as f:
                        doc = Doc97File(f)
                        doc.load_key(password=password)  # Gi·∫£i m√£ v·ªõi m·∫≠t kh·∫©u
                        with open(output_path, "wb") as outfile:
                            doc.decrypt(outfile)  # Ghi k·∫øt qu·∫£ gi·∫£i m√£ v√†o file ƒë·∫ßu ra
                    print(f"{GREEN}\nFile ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£ th√†nh c√¥ng v·ªõi m·∫≠t kh·∫©u: {password}{RESET}")
                    return # N·∫øu gi·∫£i m√£ th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
                except exceptions.InvalidKeyError:
                    # N·∫øu m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá
                    pass
                except exceptions.DecryptionError as e:
                    # N·∫øu g·∫∑p l·ªói khi gi·∫£i m√£
                    print(f"{RED}L·ªói khi gi·∫£i m√£ v·ªõi m·∫≠t kh·∫©u {password}: {e}{RESET}")
                except Exception as e:
                    # X·ª≠ l√Ω c√°c l·ªói kh√°c
                    print(f"{RED}L·ªói khi gi·∫£i m√£ v·ªõi m·∫≠t kh·∫©u {password}: {e}{RESET}")

                # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh sau m·ªói m·∫≠t kh·∫©u
                pbar.update(1)

        # N·∫øu kh√¥ng t√¨m th·∫•y m·∫≠t kh·∫©u ƒë√∫ng
        print(f"{YELLOW}Kh√¥ng t√¨m th·∫•y m·∫≠t kh·∫©u ƒë√∫ng trong danh s√°ch.{RESET}")
    
    except FileNotFoundError:
        print(f"{RED}File wordlist kh√¥ng t·ªìn t·∫°i: {wordlist_path}{RESET}")
    except Exception as e:
        print(f"{RED}L·ªói khi ƒë·ªçc wordlist: {e}{RESET}")

def decrypt_generate_full_complex_passwords(file_path, output_path, max_length):
    """Sinh v√† th·ª≠ m·∫≠t kh·∫©u ph·ª©c t·∫°p ƒë·ªÉ gi·∫£i m√£ file n·∫øu m·∫≠t kh·∫©u ƒë√∫ng."""
    chars = string.digits + string.ascii_letters + string.punctuation  # Ch·ªØ s·ªë, ch·ªØ c√°i v√† k√Ω t·ª± ƒë·∫∑c bi·ªát

    def try_password(password, file_path, output_path):
        """Th·ª≠ m·∫≠t kh·∫©u v√† gi·∫£i m√£ file n·∫øu m·∫≠t kh·∫©u ƒë√∫ng."""
        try:
            # ƒê·∫£m b·∫£o th∆∞ m·ª•c ƒë·∫ßu ra t·ªìn t·∫°i
            output_dir = os.path.dirname(output_path)
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥

            with open(file_path, "rb") as f:
                doc = Doc97File(f)
                doc.load_key(password=password)  # Gi·∫£i m√£ v·ªõi m·∫≠t kh·∫©u
                with open(output_path, "wb") as outfile:
                    doc.decrypt(outfile)  # Ghi k·∫øt qu·∫£ gi·∫£i m√£ v√†o file ƒë·∫ßu ra
            return password  # Tr·∫£ v·ªÅ m·∫≠t kh·∫©u n·∫øu gi·∫£i m√£ th√†nh c√¥ng
        except (exceptions.InvalidKeyError, exceptions.DecryptionError) as e:
            return None  # Tr·∫£ v·ªÅ None n·∫øu c√≥ l·ªói
        except Exception as e:
            print(f"ƒê√£ x·∫£y ra l·ªói: {e}")
            return None  # B·∫Øt m·ªçi l·ªói kh√°c

    # Sinh m·∫≠t kh·∫©u ph·ª©c t·∫°p
    for length in range(1, max_length + 1):
        password_tuples = itertools.product(chars, repeat=length)
        passwords = [''.join(password_tuple) for password_tuple in password_tuples]

        # Thanh ti·∫øn tr√¨nh
        with tqdm(total=len(passwords), desc=f"ƒêang th·ª≠ m·∫≠t kh·∫©u ƒë·ªô d√†i {length}", unit=" m·∫≠t kh·∫©u") as pbar:
            for password in passwords:
                try:
                    result = try_password(password, file_path, output_path)  # Ki·ªÉm tra m·∫≠t kh·∫©u
                    if result:
                        print(f"\nFile ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£ th√†nh c√¥ng v·ªõi m·∫≠t kh·∫©u: {result}")
                        pbar.n = pbar.total  # ƒê·∫∑t thanh ti·∫øn tr√¨nh th√†nh 100%
                        pbar.last_print_n = pbar.total  # C·∫≠p nh·∫≠t v·ªã tr√≠ in cu·ªëi c√πng
                        pbar.update(0)  # C·∫≠p nh·∫≠t ƒë·ªÉ d·ª´ng thanh ti·∫øn tr√¨nh
                        pbar.close()  # ƒê√≥ng thanh ti·∫øn tr√¨nh
                        return  # Tho√°t kh·ªèi h√†m ngay khi gi·∫£i m√£ th√†nh c√¥ng
                    pbar.update(1)  # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
                except KeyboardInterrupt:
                    print("\nQu√° tr√¨nh ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng (Ctrl + C).")
                    pbar.close()  # ƒê·∫£m b·∫£o thanh ti·∫øn tr√¨nh ƒë∆∞·ª£c ƒë√≥ng
                    return  # Tho√°t kh·ªèi v√≤ng l·∫∑p v√† k·∫øt th√∫c ch∆∞∆°ng tr√¨nh

    print(f"{YELLOW}Kh√¥ng t√¨m th·∫•y m·∫≠t kh·∫©u ƒë√∫ng trong danh s√°ch.{RESET}")

def main():
    """ƒêi·ªÉm v√†o ch√≠nh cho CLI.""" 
    display_logo()  # G·ªçi h√†m display_logo ƒë·ªÉ hi·ªÉn th·ªã logo

    # T·∫°o ƒë·ªëi t∆∞·ª£ng parser cho CLI
    parser = argparse.ArgumentParser(description="Gi·∫£i m√£ file MS DOC 97.")
    parser.add_argument("file", help="ƒê∆∞·ªùng d·∫´n t·ªõi file .doc", nargs="?")  # T√πy ch·ªçn tham s·ªë file
    parser.add_argument("--password", help="M·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£ file", required=False)
    parser.add_argument("--check", action="store_true", help="Ki·ªÉm tra xem file c√≥ ƒë∆∞·ª£c m√£ h√≥a kh√¥ng")
    parser.add_argument("--output", help="ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file ƒë√£ gi·∫£i m√£", required=False)
    parser.add_argument("--wordlist", help="ƒê∆∞·ªùng d·∫´n t·ªõi file danh s√°ch m·∫≠t kh·∫©u (wordlist)", required=False)
    parser.add_argument("--xor", action="store_true", help="Gi·∫£i m√£ v·ªõi XOR")
    parser.add_argument("--generate-passwords", action="store_true", help="Sinh v√† th·ª≠ m·∫≠t kh·∫©u ph·ª©c t·∫°p ƒë·ªÉ gi·∫£i m√£")

    # Ph√¢n t√≠ch c√°c ƒë·ªëi s·ªë ƒë∆∞·ª£c nh·∫≠p t·ª´ CLI
    args = parser.parse_args()

    # N·∫øu kh√¥ng c√≥ tham s·ªë n√†o ho·∫∑c tham s·ªë kh√¥ng h·ª£p l·ªá, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    if not args.file:
        display_help()
        sys.exit(0)

    if not os.path.exists(args.file):
        print(f"{RED}File {args.file} kh√¥ng t·ªìn t·∫°i.{RESET}")
        sys.exit(1)

    if args.check:
        check_encryption(args.file)
    elif args.generate_passwords and args.output:
        # Y√™u c·∫ßu nh·∫≠p ƒë·ªô d√†i t·ªëi ƒëa c·ªßa m·∫≠t kh·∫©u
        max_length = int(input("Nh·∫≠p ƒë·ªô d√†i t·ªëi ƒëa c·ªßa m·∫≠t kh·∫©u: "))
        decrypt_generate_full_complex_passwords(args.file, args.output, max_length)
    elif args.xor and args.wordlist and args.output:
        decrypt_with_xor(args.file, args.wordlist, args.output)  # Gi·∫£i m√£ b·∫±ng XOR v·ªõi wordlist
    elif args.password and args.output:
        decrypt_file(args.file, args.password, args.output)
    elif args.wordlist and args.output:
        decrypt_using_wordlist(args.file, args.wordlist, args.output)
    else:
        print(f"{RED}ƒê·ªÉ gi·∫£i m√£ file, b·∫°n c·∫ßn cung c·∫•p c·∫£ --password ho·∫∑c --wordlist v√† --output.{RESET}")
        sys.exit(1)

if __name__ == "__main__":
    main()
